{#

   AutoScaling group with servers that are managed via puppet.
   
   Expects the following params:
   - GitRepo: puppet git repo to checkout and apply
   - GitRepoBranch: branch of above
   - ExtraPkgs: extra RPM packages to install
   - FrontendInstanceCount: number of desired instances
   - FrontendInstanceType
   
   Expects the following objects:
   - PrivateSubnet
   - PublicElasticLoadBalancer
   - PublicLoadBalancerSecurityGroup
   - BastionHostSecurityGroup
   
#}

    "FrontendFleet" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [{ "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] }],
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnet" }],
        "LaunchConfigurationName" : { "Ref" : "FrontendLaunchConfig"  },
        "MinSize" : "1",
        "MaxSize" : "10",
        "DesiredCapacity" : { "Ref" : "FrontendInstanceCount" },
        "LoadBalancerNames" : [ { "Ref" : "PublicElasticLoadBalancer" } ],
        "Tags" : [ { "Key" : "Network", "Value" : "Public", "PropagateAtLaunch" : "true" } ]
      }
    },  
    
    "FrontendLaunchConfig"  : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment1" : "Configure the FrontendServer by bootstrapping into a puppet build.",

        "AWS::CloudFormation::Init" : {
          "config" : {
          
            "packages" : {
              "yum" : {
                "gcc"          : [],
                "ruby"         : [],
                "ruby-devel"   : [],
                "rubygems"     : [],  
                "puppet"       : [],
                "git"          : [],
                "curl"         : [],
                "wget"         : [],
                "aws-cli"      : [],
                "aws-scripts-ses" : [],
                "aws-apitools-ec2" : [], 
                "aws-amitools-ec2" : [],
                "aws-apitools-mon" : [],
                "aws-apitools-elb" : [],
                "aws-apitools-rds" : []                            
              }
            },
            

            "files" : {    
        
              "/tmp/touch.tmp" : {
                "content" :  "touched",
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              }
            }

{#
            "services" : {
              "sysvinit" : {
                "puppet-agent" : {
                  "enabled"       : "true",
                  "ensureRunning" : "true",
                  "files"         : [ "/etc/httpd/conf.d/maptobackend.conf", "/var/www/html/index.html" ]
                }
              }           
            }
#}   
          }
        }
      },
      "Properties" : {
        "ImageId"        : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "FrontendInstanceType" }, "Arch" ] } ] },
        "SecurityGroups" : [ { "Ref" : "FrontendSecurityGroup" } ],
        "InstanceType"   : { "Ref" : "FrontendInstanceType" },
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
        
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "FrontendWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "## Initialize CloudFormation bits\n",
          "/opt/aws/bin/cfn-init -v ",
          "   --stack ", { "Ref" : "AWS::StackName" }, 
          "   --resource FrontendLaunchConfig",

{#
          "   --access-key ",  { "Ref" : "HostKeys" },
          "   --secret-key ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
#}

          "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

{#          {% include 'Resources/UserData-Puppet-Helper-Scripts.json' %}, #}

"function prepare_rhel6_for_puppet {\n",

"\n",
"    local extra_pkgs=$*\n",
"\n",
"    # Get the puppet labs repo installed\n",
"    rpm -ivh http://yum.puppetlabs.com/el/6/products/i386/puppetlabs-release-6-7.noarch.rpm\n",
"\n",
"    # Get EPEL installed\n",
"    EPEL_RPM=http://mirror.utexas.edu/epel/6/i386/epel-release-6-8.noarch.rpm\n",
"    if ! [ -f /etc/yum.repos.d/epel.repo ]; then\n",
"        rpm -ihv ${EPEL_RPM} || /bin/true        \n",
"    fi\n",
"\n",
"    # We need to disable yum priorities, because of the stupid Amazon repo priorities \n",
"    #  prevent getting latest puppet\n",
"    export PATH=\"${PATH}:/usr/local/bin\"\n",
"    PKGS=puppet\n",
"    yum -y --enablerepo=epel --disableplugin=priorities update ${PKGS}\n",
"\n",
"    # install r10k using gem\n",
"    gem install r10k\n",
"\n",
"    echo $( facter operatingsystem )\n",
"    # to convince puppet we're a RHEL derivative, and then get EPEL installed\n",
"    [ -r /etc/redhat-release ] || echo \"CentOS release 6.4 (Final)\" > /etc/redhat-release\n",
"    #    [ -f /etc/system-release ] && cp -af /etc/system-release /etc/redhat-release \n",
"\n",
"}\n",

"\n",
"# Run puppet on a suitable repo\n",
"function do_puppet {\n",
"\n",
"    local site_file=${1:-manifests/site.pp}\n",
"\n",
"    #r10k deploy environment --puppetfile Puppetfile\n",
"    if [ -r Puppetfile ]; then\n",
"            HOME=/root r10k puppetfile install\n",
"    fi\n",
"    echo "Beginning first Puppet run"
"    puppet apply ${site_file}  --modulepath=./modules\n",
"    # and once again to make sure
"    echo "Beginning second Puppet run"
"    puppet apply ${site_file}  --modulepath=./modules\n",
"\n",
"}\n",
"\n",
"#\n",
"# Pull private data from S3\n",
"#    Takes a set of urls as an argument,\n",
"#   and leaves a set of files/dirs in current directory\n",
"#\n",
"function pull_private_data {\n",
"    local urls=$@\n",
"\n",
"    for url in $urls; do    \n",
"        protocol=$( echo $url | awk -F: '{print $1}' )\n",
"\n",
"        if [ 'https' = \"${protocol}\" ]; then\n",
"            wget -q ${url}\n",
"        fi    \n",
"        \n",
"        if [ 'git' = \"${protocol}\" ]; then\n",
"            git clone ${url}\n",
"        fi\n",
"\n",    
"        if [ 's3' = \"${protocol}\" ]; then\n",
"            local fname=$(  echo $url | awk -F/ '{print $NF}' )\n",
"            s3cmd get ${url} ${fname}\n",
"        fi\n",    
"    done\n",
"}\n",
"\n",
"#\n",
"# pull repo with git\n",
"#\n",
"function git_pull {\n",
"\n",
"    local repo=$1\n",
"    local branch=$2\n",
"\n",
"    if ! [ x = \"x${branch}\" ]; then \n",
"        branch_arg=\"--branch $branch\"\n",
"    fi\n",
"    \n",
"    \n",
"    git clone ${branch_arg} $repo \n",
"    dir=$( echo ${repo} | awk -F/ '{print $NF}' | sed 's/\\.git//' )\n",
"    cd ${dir}\n",
"\n",
"    git submodule sync || /bin/true\n",
"    git submodule update --init  || /bin/true\n",
"\n",
"    echo\n",
"}\n",



          
          "prepare_rhel6_for_puppet \n",

          "# pull & setup puppet modules and run manifest\n",
          "PUPPET_REPO_URL='", { "Ref" : "GitRepo" }, "'\n",
          "PUPPET_REPO_BRANCH='", { "Ref" : "GitRepoBranch" }, "'\n",
          "cd /tmp\n",
          "git_pull ${PUPPET_REPO_URL} ${PUPPET_REPO_BRANCH}\n",
          "do_puppet ./manifests/site.pp > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",    

          "# Signal completion\n",
          "/opt/aws/bin/cfn-signal -e $? -r \"Frontend setup by puppet complete\" '", { "Ref" : "FrontendWaitHandle" }, "'\n" 

        ]]}}

      },
      "DependsOn" : "PublicRoute"
    },

    "FrontendSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
            { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "PublicLoadBalancerSecurityGroup" } } ,
            { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "BastionHostSecurityGroup" } } ],
        "SecurityGroupEgress" : [
            { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" },
            { "IpProtocol" : "udp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" }
          ]
      }
    },
    
    "FrontendWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "FrontendWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "FrontendFleet",
      "Properties" : {
        "Handle"  : { "Ref" : "FrontendWaitHandle" },
        "Timeout" : "300",
        "Count"   : { "Ref" : "FrontendInstanceCount" }
      }
    }
 
