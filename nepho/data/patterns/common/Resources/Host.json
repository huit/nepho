{#

   Single Host server managed via puppet.
   
   TODO: update
   
   Expects the following params:
   - GitRepo: puppet git repo to checkout and apply
   - GitRepoBranch: branch of above
   - ExtraPkgs: extra RPM packages to install
   - InstanceCount: number of desired instances
   - InstanceType
   
   Expects the following objects:
   - PrivateSubnet
   - PublicElasticLoadBalancer
   - PublicLoadBalancerSecurityGroup
   - BastionHostSecurityGroup
   
#}

{# ****  General host on EC2, in or out of a VPC **** #}

    {%- macro host(
                    name, 
                    ports=80, 
                    subnet=None, 
                    elb=None, 
                    elb2=None, 
                    public_hostname=None,
                    rds=None, 
                    bucket=None, 
                    public_bucket=None,
                    public='no'
                  ) -%}
    
    "{{ name }}User" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect": "Allow",
            "Action": [
              "cloudformation:DescribeStackResource"
            ],
            "Resource": "*"
          }]}
        }]
      }
    },

 {% if bucket is not none  %}   
    "{{ name }}BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Id":"PrivateBucketPolicy",
          "Statement":[  
          	
            {% if public_bucket is not none and public_bucket == true %} 
            {
	          "Sid":"AddPerm",
              "Effect":"AnonymousRead",
	          "Principal": { "AWS": "*"},
              "Action":["s3:GetObject"],
              "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "{{ bucket }}" } , "/*" ]]}
            },
            {% endif %}
            {
              "Sid":"ReadBucketAccess",
	          "Action":["s3:ListBucket*", "s3:GetBucket*"],
	          "Effect":"Allow",
	          "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "{{ bucket }}" } , "" ]]},
	          "Principal":{ "AWS": { "Fn::GetAtt" : [ "{{ name }}User", "Arn" ]} }
            },
            {
              "Sid":"ReadWriteObjectAccess",
	          "Action":["s3:*"],
	          "Effect":"Allow",
	          "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "{{ bucket }}" } , "/*" ]]},
	          "Principal":{ "AWS": { "Fn::GetAtt" : [ "{{ name }}User", "Arn" ]} }
            }
          ]
        },
        "Bucket" : {"Ref" : "{{ bucket }}"}
      }
    },
    {% endif %}

    "{{ name }}Keys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "{{ name }}User"}
      }
    },

    "{{ name }}SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        {% if subnet is not none  %}"VpcId" : { "Ref" : "VPC" },{% endif %} 
        "GroupDescription" : "Security group with access for {{ ports }}",
        "SecurityGroupIngress" : [
          {% for p in ports %}
          {"IpProtocol" : "tcp", "FromPort" : "{{ p }}",  "ToPort" :  "{{ p }}", "CidrIp" : "0.0.0.0/0"},
          {% endfor %}
          {"IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHAccessRange"}}
        ]
      }      
    },  

    {% if public != 'no' or subnet is none  %}
    "{{ name }}Endpoint" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "InstanceId" : { 
          {% if subnet is not none %}"Domain" : "vpc",{% endif %}        
          "Ref" : "{{ name }}Instance" }
      }
    },
    {% endif %}
      
      
    "{{ name }}Instance": {  
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "Single host.",      
        "AWS::CloudFormation::Init" : {
          "config" : {        
            "packages" : {
              "yum" : {
                {% for pkg in packages %}
                "{{ pkg }}" : [],
                {% endfor %}  
                {% if management == 'puppet' %}
                "ruby"            : [],
                "rubygems"        : [],
                "ruby-devel"      : [],
                "gcc"             : [],
                "gcc-c++"         : [],
                "puppet"          : [],
                {% endif %}   
                {% if bucket is not none %}
                "fuse"         : [],
                "fuse-libs"    : [],
                "python-pip"   : [],
                {% endif %}                       
                "curl"         : [],
                "wget"         : [],
                "aws-cli"      : [],
                "aws-scripts-ses" : [],
                "aws-apitools-ec2" : [], 
                "aws-amitools-ec2" : [],
                "aws-apitools-mon" : [],
                "aws-apitools-elb" : [],
                "aws-apitools-rds" : [],
                "git"              : []        
              }
            },
                  
            "files" : {

              {% if management == 'none' %} 
              "/var/www/html/index.html" : {
                "content" : { "Fn::Join" : ["\n", [
                  "<img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                  "<h1>Congratulations, you have successfully launched an AWS CloudFormation sample.</h1>"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
              {% endif %}

              "/etc/aws/credentials" : {
                "content" : { "Fn::Join" : ["", [
                  "[default]\n",
                  "aws_access_key_id=", { "Ref" : "{{ name }}Keys" }, "\n",
                  "aws_secret_access_key=", {"Fn::GetAtt": ["{{ name }}Keys", "SecretAccessKey"]}, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              
              "/etc/profile.d/aws.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "AWS_CONFIG_FILE=/etc/aws/credentials\n",
                  "export AWS_CONFIG_FILE\n"
                ]]},
                "mode"    : "000664",
                "owner"   : "root",
                "group"   : "root"
              },
                                            
              "/etc/cfn/cfn-credentials" : {
                "content" : { "Fn::Join" : ["", [
                  "AWSAccessKeyId=", { "Ref" : "{{ name }}Keys" }, "\n",
                  "AWSSecretKey=", {"Fn::GetAtt": ["{{ name }}Keys", "SecretAccessKey"]}, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackName" }, "\n",
                  "credential-file=/etc/cfn/cfn-credentials\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.{{ name }}Instance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r {{ name }}Instance ",
                                                   " --credential-file /etc/cfn/cfn-credentials ",
                                                   " --region     ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                {% if management == 'none' %}
                "httpd" : {
                  "enabled"       : "true",
                  "ensureRunning" : "true",
                  "files"         : [ "/var/www/html/index.html" ]
                },
                {% endif %}                
                "sendmail" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
          }
        }
      },      

      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType" : { "Ref" : "{{ name }}InstanceType" },

        {% if subnet is not none  %}
        "SubnetId" : { "Ref" : "{{ subnet }}" },
        "SecurityGroupIds" : [ {"Ref" : "{{ name }}SecurityGroup"} ],
        {% else %}
        "SecurityGroups" : [ {"Ref" : "{{ name }}SecurityGroup"} ],
        {% endif %}        
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
        
          "#!/bin/bash -v\n",

          {# **** Inject CF values into the environment **** #}
                    
          "# Establish CF values and objects into script variables.\n",         

          "export CF_STACK_NAME='",   { "Ref" : "AWS::StackName" }, "'\n",
          "export CF_REGION='",       { "Ref" : "AWS::Region" }, "'\n",
          "export CF_RESOURCE='{{ name }}Instance'\n",
          "export CF_ACCESS_KEY='",   { "Ref" : "{{ name }}Keys" }, "'\n",
          "export CF_SECRET_KEY='",   {"Fn::GetAtt": ["{{ name }}Keys", "SecretAccessKey"]}, "'\n",
          "export CF_WAIT_HANDLE='",  { "Ref" : "{{ name }}WaitHandle" }, "'\n",
                    
          {# **** Inject environment variables about the deployment **** #}
          
		  "# Inject some NEPHO_* platform variables\n",
		  
          "export NEPHO_INSTANCE_ROLE='",     { "Ref" : "{{ name }}InstanceRole" }, "'\n",
          {% if elb is not none  %}
          "export NEPHO_FORWARD_HOSTNAME='", { "Fn::GetAtt" : [ "{{ elb }}", "DNSName" ]}, "'\n",
          "export NEPHO_PUBLIC_HOSTNAME='",  { "Fn::GetAtt" : [ "{{ elb }}", "DNSName" ]}, "'\n",
          {% endif %}
          {% if elb2 is not none  %}
          "export NEPHO_BACKEND_HOSTNAME='", { "Fn::GetAtt" : [ "{{ elb2 }}", "DNSName" ]}, "'\n",
          {% endif %} 	  
          {% if public_hostname is not none %}
          "export NEPHO_PUBLIC_HOSTNAME='{{ public_hostname }}'\n",
          {% endif %}
          "export NEPHO_EXTERNAL_HOSTNAME=${NEPHO_PUBLIC_HOSTNAME}\n",
		  
		  "export NEPHO_INSTANCE_ROLE='",     { "Ref" : "{{ name }}InstanceRole" }, "'\n",
          {% if elb is not none  %}"export NEPHO_EXTERNAL_HOSTNAME='", { "Fn::GetAtt" : [ "{{ elb }}", "DNSName" ]}, "'\n",{% endif %}
          {% if elb2 is not none %}"export NEPHO_BACKEND_HOSTNAME='",  { "Fn::GetAtt" : [ "{{ elb2 }}", "DNSName" ]}, "'\n",{% endif %} 	  
		  {% if rds is not none  %}
		  "export NEPHO_DATABASE_HOST='",     { "Fn::GetAtt": [ "{{ rds }}", "Endpoint.Address" ] }, "'\n",
		  "export NEPHO_DATABASE_PORT='",     { "Fn::GetAtt": [ "{{ rds }}", "Endpoint.Port" ] }, "'\n",
		  "export NEPHO_DATABASE_NAME='",     { "Ref" : "DBName" }, "'\n",
		  "export NEPHO_DATABASE_USER='",     { "Ref" : "DBUsername" }, "'\n",	  
		  "export NEPHO_DATABASE_PASSWORD='", { "Ref" : "DBPassword" }, "'\n",	  
		  "export NEPHO_DATABASE_CONNECT_STRING='", { "Fn::Join": [ 
		            "", [ "mysql://",
                          { "Ref" : "DBUsername" },
                          ":",      
                          { "Ref" : "DBPassword" },       
                          "@",                               
                          { "Fn::GetAtt": [ "{{ rds }}", "Endpoint.Address" ] },
                          ":",
                          { "Fn::GetAtt": [ "{{ rds }}", "Endpoint.Port" ] },
                          "/",
                          { "Ref": "DBName" }
                       ]]}, "'\n", 
		  {% endif %}		  		 
		  {% if bucket is not none %}
		  "export NEPHO_S3_BUCKET='", {"Ref" : "{{ bucket }}"}, "'\n",
		  "export NEPHO_S3_BUCKET_URL='", { "Fn::Join" : [ "", [ "https://", { "Fn::GetAtt" : [ "{{ bucket }}", "DomainName" ]}]] }, "'\n",
          "export NEPHO_S3_BUCKET_ACCESS='",  { "Ref" : "{{ name }}Keys" },  "'\n",
          "export NEPHO_S3_BUCKET_KEY='",   {"Fn::GetAtt": ["{{ name }}Keys", "SecretAccessKey"]},  "'\n",
          {% endif %}
		 
          {% if management !='script' and management != 'none' %}
          "export NEPHO_GIT_REPO_URL='",    { "Ref" : "ConfigMgmtGitRepo" }, "'\n",
          "export NEPHO_GIT_REPO_BRANCH='", { "Ref" : "ConfigMgmtGitRepoBranch" }, "'\n",
          {% endif %}
                          
          {#  **** Include script snippets here ...  **** #}
      
          {% for line in scripts.cf_pre_script  %}
          {{ line }}, {% endfor %}  
          
          {% for line in scripts.cf_init_script %}
          {{ line }}, {% endfor %}  

 
          {#  **** Include script snippets here ...  **** #}
          
          {% for line in scripts.management %} {{ line }},
          {% endfor %}  

          {% for line in scripts.cf_post_script %} {{ line }},
          {% endfor %}  

          ""
        ]]}}

      }       
   },
    
    "{{ name }}WaitHandle" : {
      {% if subnet is not none  %}"DependsOn" : "NATIPAddress",{% endif %}
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "{{ name }}WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "{{ name }}Instance",
      "Properties" : {
        "Handle" : {"Ref" : "{{ name }}WaitHandle"},
        "Timeout" : "600"
      }
    }

    {%- endmacro %}     
