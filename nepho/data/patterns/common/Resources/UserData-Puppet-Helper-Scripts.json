{#

   Chunk of user data script that contains useful helper functions
     for doing a puppet build.
#}
"function prepare_rhel6_for_puppet {\n",
{#
"\n",
"    local extra_pkgs=$*\n",
"\n",
"    # Get the puppet labs repo installed\n",
"    rpm -ivh http://yum.puppetlabs.com/el/6/products/i386/puppetlabs-release-6-7.noarch.rpm\n",
"\n",
"    # Get EPEL installed\n",
"    EPEL_RPM=http://mirror.utexas.edu/epel/6/i386/epel-release-6-8.noarch.rpm\n",
"    if ! [ -f /etc/yum.repos.d/epel.repo ]; then\n",
"        rpm -ihv ${EPEL_RPM} || /bin/true        \n",
"    fi\n",
"\n",
"    # We need to disable yum priorities, because of the stupid Amazon repo priorities \n",
"    #  prevent getting latest puppet\n",
"    export PATH=\"${PATH}:/usr/local/bin\"\n",
"    PKGS=puppet\n",
"    yum -y --enablerepo=epel --disableplugin=priorities update ${PKGS}\n",
"\n",
"    # install r10k using gem\n",
"    gem install r10k\n",
"\n",
"    echo $( facter operatingsystem )\n",
"    # to convince puppet we're a RHEL derivative, and then get EPEL installed\n",
"    [ -r /etc/redhat-release ] || echo \"CentOS release 6.4 (Final)\" > /etc/redhat-release\n",
"    #    [ -f /etc/system-release ] && cp -af /etc/system-release /etc/redhat-release \n",
"\n",
"}\n",

"\n",
"# Run puppet on a suitable repo\n",
"function do_puppet {\n",
"\n",
"    local site_file=${1:-manifests/site.pp}\n",
"\n",
"    #r10k deploy environment --puppetfile Puppetfile\n",
"    if [ -r Puppetfile ]; then\n",
"            HOME=/root r10k puppetfile install\n",
"    fi\n",
"    echo "Beginning first Puppet run"
"    puppet apply ${site_file}  --modulepath=./modules\n",
"    # and once more to make sure
"    echo "Beginning second Puppet run"
"    puppet apply ${site_file}  --modulepath=./modules\n",
"\n",
"}\n",
"\n",
"#\n",
"# Pull private data from S3\n",
"#    Takes a set of urls as an argument,\n",
"#   and leaves a set of files/dirs in current directory\n",
"#\n",
"function pull_private_data {\n",
"    local urls=$@\n",
"\n",
"    for url in $urls; do    \n",
"        protocol=$( echo $url | awk -F: '{print $1}' )\n",
"\n",
"        if [ 'https' = \"${protocol}\" ]; then\n",
"            wget -q ${url}\n",
"        fi    \n",
"        \n",
"        if [ 'git' = \"${protocol}\" ]; then\n",
"            git clone ${url}\n",
"        fi\n",
"\n",    
"        if [ 's3' = \"${protocol}\" ]; then\n",
"            local fname=$(  echo $url | awk -F/ '{print $NF}' )\n",
"            s3cmd get ${url} ${fname}\n",
"        fi\n",    
"    done\n",
"}\n",
"\n",
"#\n",
"# pull repo with git\n",
"#\n",
"function git_pull {\n",
"\n",
"    local repo=$1\n",
"    local branch=$2\n",
"\n",
"    if ! [ x = \"x${branch}\" ]; then \n",
"        branch_arg=\"--branch $branch\"\n",
"    fi\n",
"    \n",
"    \n",
"    git clone ${branch_arg} $repo \n",
"    dir=$( echo ${repo} | awk -F/ '{print $NF}' | sed 's/\\.git//' )\n",
"    cd ${dir}\n",
"\n",
"    git submodule sync || /bin/true\n",
"    git submodule update --init  || /bin/true\n",
"\n",
"    echo\n",
"}\n",
#}
